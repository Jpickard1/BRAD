import pandas as pd
import numpy as np
from copy import deepcopy
import os
import sys
from importlib import reload
from scipy.stats import zscore
from scipy.stats import entropy
import scipy.io
import scipy
import textwrap
from scipy import sparse
import importlib
from itertools import product
from datetime import datetime
from IPython.display import display # displaying dataframes
import string
import warnings
import re

# Bioinformatics
import gget


# gene enrichment
def queryEnrichr(chatstatus, gene_list):
    """
    Queries the Enrichr gene enrichment database based on the provided chat status and user prompt,
    and optionally saves or plots the results.

    Parameters:
    chatstatus (dict): A dictionary containing the chat status, user prompt, and configuration settings.
                       Expected keys in chatstatus:
                       - 'prompt' (str): The user prompt containing gene names and optional commands.
                       - 'config' (dict): Configuration settings, including:
                           - 'max_enrichr_pval' (float): Maximum p-value threshold for enrichment results.
                           - 'num_df_rows_display' (int): Number of rows to display from the results.
                           - 'default_enrichr_db' (str): Default database to use for the Enrichr query.

    Returns:
    dict: Updated chatstatus dictionary with the process details and output messages.
    """
    prompt              = chatstatus['prompt']
    max_p_val           = chatstatus['config']['max_enrichr_pval']
    num_df_rows_display = chatstatus['config']['num_df_rows_display']
    default_enrichr_db  = chatstatus['config']['default_enrichr_db']
    process = {}
    db, save, plot, dbfound = None, False, False, False

    # Remove any punctuation except for - and _, which are used in gget database names
    punctuation_to_remove = string.punctuation.replace('-', '').replace('_', '')
    translator = str.maketrans('', '', punctuation_to_remove)
    prompt = prompt.translate(translator)
    
    # Get list of gene names
    current_script_path = os.path.abspath(__file__)
    current_script_dir = os.path.dirname(current_script_path)
    file_path = os.path.join(current_script_dir, 'helperData', 'gene_list.txt')
    with open(file_path, "r") as file:
        g_from_file = [line.strip() for line in file]
    file_path = os.path.join(current_script_dir, 'helperData', 'ggetEnrichrDatabases.tsv')
    df = pd.read_csv(file_path, delimiter='\t')
    dbs = list(df['Gene-set Library'].values)
    dbs = [dbi.upper() for dbi in dbs]
    for gene in prompt.split(' '):
        #if gene.upper() in g_from_file:
        #    gene_list.append(gene)
        if gene.upper() in dbs:
            if db is not None:
                warnings.warn('Two potential databases were provided!')
            else:
                db = gene
                dbfound = True
        #if gene.upper() == 'SAVE':
        #    save = True
        if gene.upper() == 'PLOT':
            plot = True
    save = True
    if db is None:
        warnings.warn('warning: setting db to default')
        db = default_enrichr_db
        
    process = {
        'genes'      : str(gene_list),
        'plot'       : plot,
        'save'       : save,
        'database'   : db,
        'default db' : dbfound,
    }
        
    # query GO
    ax = None
    if plot:
        fig, ax = plt.subplots()
    edf = gget.enrichr(gene_list, database=db, plot=plot, ax=ax)
    edf = edf[edf['p_val'] <= max_p_val]
    
    output = 'The following table was generated by quering the gene list against ' + db + ':'
    print(output)
    display(edf[:num_df_rows_display].style)
    if save:
        filepath = 'RAG-gget-' + db + '-' + str(datetime.now()) + '.csv'
        filepath = filepath.replace(" ", "")
        edf.to_csv(filepath)
        saveOutput = 'The table has been saved to: ' + str(filepath)
        output += (' \n ' + saveOutput)
        print(saveOutput)
        process['filepath'] = filepath

    if plot:
        plt.show()
    chatstatus['process'] = process
    chatstatus['output']  = output
    return chatstatus
