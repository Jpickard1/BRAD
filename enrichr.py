import pandas as pd
import numpy as np
from copy import deepcopy
import os
import sys
from importlib import reload
from scipy.stats import zscore
from scipy.stats import entropy
import scipy.io
import scipy
import textwrap
from scipy import sparse
import importlib
from itertools import product
from datetime import datetime
from IPython.display import display # displaying dataframes
import string
import warnings
import re

# Bioinformatics
import gget


# gene enrichment
def queryGGET(prompt, k=10):
    db, save, plot = None, False, False
    
    # Remove any punctuation except for - and _, which are used in gget database names
    punctuation_to_remove = string.punctuation.replace('-', '').replace('_', '')
    translator = str.maketrans('', '', punctuation_to_remove)
    prompt = prompt.translate(translator)
    
    gene_list = []
    # Get list of gene names
    with open("gene_list.txt", "r") as file:
        g_from_file = [line.strip() for line in file]
    df = pd.read_csv('ggetEnrichrDatabases.tsv', delimiter='\t')
    dbs = list(df['Gene-set Library'].values)
    dbs = [dbi.upper() for dbi in dbs]
    for gene in prompt.split(' '):
        if gene.upper() in g_from_file:
            gene_list.append(gene)
        if gene.upper() in dbs:
            if db is not None:
                warnings.warn('Two potential databases were provided!')
            else:
                db = gene
        if gene.upper() == 'SAVE':
            save = True
        if gene.upper() == 'PLOT':
            plot = True
    
    if db is None:
        warnings.warn('warning: setting db to default')
        db = 'GO_Biological_Process_2021'
        
    # query GO
    ax = None
    if plot:
        fig, ax = plt.subplots()
    edf = gget.enrichr(gene_list, database=db, plot=plot, ax=ax)
    
    print('The following table was generated by quering the gene list against ' + db + ':')
    display(edf[:5].style)
    if save:
        filepath = 'RAG-gget-' + db + '-' + str(datetime.now()) + '.csv'
        filepath = filepath.replace(" ", "")
        edf.to_csv(filepath)
        print('The table has been saved to: ' + str(filepath))

    if plot:
        plt.show()
    return None, None

def extract_csv_word(text):
    pattern = r'\b\w+\.csv\b'
    match = re.search(pattern, text)
    if match:
        return match.group()
    else:
        return None

def loadFile(prompt):
    '''
    implemented for csv files only
    '''
    file = extract_csv_word(prompt)
    loader = CSVLoader(loadfile)
    data = loader.load()
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=20)
    text_chunks = text_splitter.split_documents(data)
    embeddings_model = HuggingFaceEmbeddings(model_name='BAAI/bge-base-en-v1.5')
    docsearch = FAISS.from_documents(text_chunks, embeddings_model)
    return docsearch